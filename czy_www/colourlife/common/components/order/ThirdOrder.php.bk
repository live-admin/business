<?php

/**
 * 第三方支付单回调
 * Created by PhpStorm.
 * User: wenda
 * Update: 2015-04-29
 * Time: 下午3:49
 * @property ThirdFees $order
 */
class ThirdOrder extends OrderFactory
{
    /**
     * 初始化方法对象
     * @param $order_id
     * @param int $payment_id
     * @param string $note
     */
    public function init($order_id, $payment_id = 0, $note = '')
    {
        $this->payment_id = $payment_id;
        $this->note = $note;
       // $this->switch = @Yii::app()->config->SwitchThirdRedPacket; //商品开关
        $this->order = ThirdFees::model()->findByPk($order_id);
        $this->order_id = $order_id;
        $this->order_sn = $this->order->sn;
        $this->model = SN::findModelBySN($this->order_sn);
        $this->balance = empty($this->order->customer) ? 0 : $this->order->customer->balance;
        $this->setProfits();
    }

    /**
     * 修改付款状态
     * @return bool
     */
    private function updatePayStatus()
    {
        $this->order = ThirdFees::model()->findByPk($this->order_id);
        $this->status = Item::ORDER_AWAITING_GOODS;
        $this->order->status = $this->status;
        $this->order->pay_time = time();
        $this->order->payment_id = $this->payment_id;
        // $this->note = empty($this->note) ? '状态:已付款。操作:在线支付。' : $this->note;
        if(empty($this->note)){
            if($this->payment_id==Item::POS_PAYMENT_STATUS){
                $note = '状态:已付款。操作:pos支付。';
            }else{
                $note = '状态:已付款。操作:在线支付。';
            }
        }else{
            $note = $this->note;
        }
        $this->order->note .= ',' . $note;
        if ($this->order->update()) {
              $this->sendSms();//发短信已异常处理
              //成功记录日志
              ThirdFeesLog::createOtherFeesLog($this->order_id, $this->order->model, $this->status, $this->note,$this->order->customer_id);
              Yii::log("记录第三方订单付款流水号'{$this->order_sn}' 状态:已付款。操作:在线支付。。", CLogger::LEVEL_INFO, 'colourlife.core.ThirdOrder');
              //回调对方
              $this->order->callRemoteServerBack();
            return true;
        }
        return false;
    }

    /**
     * 修改红包余额不足状态
     * @return bool
     */
    private function balanceFailed()
    {
        $this->status = Item::ORDER_BALANCE_DEDUCT_FAILED;
        $this->order->status = $this->status;
        /*插入订单付款记录*/
        if ($this->order->update() && ThirdFeesLog::createOrderLog($this->order_id, $this->model, $this->status, '银行支付成功，红包扣款失败')) {
            Yii::log("记录第三方订单付款 订单流水号'{$this->order_sn}' 银行支付成功，红包扣款失败。", CLogger::LEVEL_INFO, 'colourlife.core.ThirdOrder');
            return true;
        }
        return false;
    }

    //物业缴费  发送短信
    private function sendSms()
    {
        try {
            Yii::app()->sms->sendThirdPaymentMessage('successfulPayment', $this->order_sn);
        } catch (Exception $e) {
            Yii::log("记录第三方订单付款流水号'{$this->order_sn}' 状态:已付款。发短信异常。", CLogger::LEVEL_INFO, 'colourlife.core.ThirdOrder');
        }
    }

    //订单处理
    public function orderProcessing()
    {
        if ($this->order->red_packet_pay > 0) { //使用红包抵扣
//            if (!$this->switch) { //开关关掉直接返回失败
//                $this->balanceFailed();
//                return null;
//            }

            if ($this->order->red_packet_pay <= $this->balance) { //余额可以支付
                $redPacketModel = new RedPacket();
                $attr = array();
                $attr['customer_id'] = $this->order->customer_id;
                $attr['to_type'] = 11;
                $attr['sum'] = $this->order->red_packet_pay;
                $attr['sn'] = $this->order->sn;
                if ($redPacketModel->consumeRedPacker($attr))
                    $this->updatePayStatus();
                else
                    $this->balanceFailed();
            } else
                $this->balanceFailed();

        } else //正常更新流程
            $this->updatePayStatus();


    }

    protected function setProfits()
    {
        /**
         * @var OrderGoodsRelation $relation
         * @var Payment $payment
         */
        if ($this->payment_id > 0) {
            $payment = Payment::model()->findByPk($this->payment_id);
            if ($payment) {
                $this->order->pay_rate = $payment->rate;
            }
        }

    }
}